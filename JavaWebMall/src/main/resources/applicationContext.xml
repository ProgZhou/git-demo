<?xml version="1.0" encoding="UTF-8"?>
<!--
  Licensed to the Apache Software Foundation (ASF) under one or more
  contributor license agreements.  See the NOTICE file distributed with
  this work for additional information regarding copyright ownership.
  The ASF licenses this file to You under the Apache License, Version 2.0
  (the "License"); you may not use this file except in compliance with
  the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<!-- @version $Id: applicationContext.xml 561608 2007-08-01 00:33:12Z vgritsenko $ -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-2.0.xsd
                           http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">

  <!-- Activate Cocoon Spring Configurator -->


<!--   Configure Log4j -->
<!--  <bean name="org.apache.cocoon.spring.configurator.log4j"-->
<!--        class="org.apache.cocoon.spring.configurator.log4j.Log4JConfigurator"-->
<!--        scope="singleton">-->
<!--    <property name="settings" ref="org.apache.cocoon.configuration.Settings"/>-->
<!--    <property name="resource" value="/WEB-INF/log4j.xml"/>-->
<!--  </bean>-->

  <!-- Activate Avalon Bridge -->
  <context:component-scan base-package="com.JavaWebMall">
    <!--不扫描springMVC下的控制层-->
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
  </context:component-scan>
  <!--引入外部的文件-->
  <context:property-placeholder location="classpath:jdbc.properties"/>

  <!--
        Spring配置文件的核心点
          数据源
          与Mybatis的整合
          事务控制
  -->

  <!--配置数据库连接池的数据源-->
  <bean id="poolDataSource" class="com.alibaba.druid.pool.DruidDataSource">
    <property name="driverClassName" value="${jdbc.driver}"/>
    <property name="url" value="${jdbc.url}"/>
    <property name="username" value="${jdbc.username}"/>
    <property name="password" value="${jdbc.password}"/>
  </bean>

<!--整合Mybatis-->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <!--指定mybatis全局配置文件的位置-->
    <property name="configLocation" value="classpath:mybatis-config.xml"/>
    <!--配置数据源-->
    <property name="dataSource" ref="poolDataSource" />
    <!--指定Mybatis，sql映射文件-->
    <property name="mapperLocations" value="classpath:mapper/*.xml"/>
  </bean>
  <!--配置扫描器，将mybatis接口的实现加入到ioc容器中-->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <!--扫描所有的DAO接口的实现，加入到IOC容器中-->
    <property name="basePackage" value="com.JavaWebMall.DAO"/>
  </bean>

  <!--配置一个可以批量执行的sqlSession-->
  <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
    <!--批量-->
    <constructor-arg name="executorType" value="BATCH"/>
  </bean>

<!--事务控制-->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <!--控制住数据源-->
    <property name="dataSource" ref="poolDataSource"/>
  </bean>

  <!--开启基于注解的事务或者使用xml配置形式的事务(必要主要的都是使用xml配置式)-->
  <aop:config>
    <!--切入点表达式，扫描Service包下的所有方法-->
    <aop:pointcut id="txPoint" expression="execution(* com.JavaWebMall.Service..*(..))"/>
    <!--配置事务增强-->
    <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
  </aop:config>

  <!--配置事务增强，事务如何切入-->
  <tx:advice id="txAdvice">
    <tx:attributes>
      <!--表示所有方法都是事务方法-->
      <tx:method name="*"/>
    </tx:attributes>
  </tx:advice>
</beans>
